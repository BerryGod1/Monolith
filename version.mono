
getgenv().Lynx = {}




getgenv().thhthgserg=False
local function htua()
    while true do
        local hwid = tostring(game:GetService("RbxAnalyticsService"):GetClientId())
        local response = game:HttpGet("http://config.lynxlua.space/validate_key?key="..getgenv().key.."&hwid="..hwid) -- This contains the auth killswitch and other stuff so this can to be looped


        hashx=loadstring(game:HttpGet("http://gist.githubusercontent.com/Dekkonot/75d939cbc31fb2f278a3d7d55dc78fd7/raw/e1a8cf16d9781bfa5b37847fa3aa4fcb6f327717/sha1.lua"))()


        local decoded = game:GetService("HttpService"):JSONDecode(response)
        if decoded.message.status == "Valid" then
            if decoded.message.enabled then
                if decoded.message.hash == hashx(os.date("%Y-%m-%d").."Yan"..hwid..getgenv().key.."1"..tostring(decoded.message.ax)) or decoded.message.hash == hashx(os.date("%Y-%m-%d").."Yan"..hwid..getgenv().key.."3"..tostring(decoded.message.ax)) then -- Only protects when its obfuscated and invalidates cracks after a day
                    print("Auth was successful")
                    discord=decoded.message.ax
                    getgenv().thhthgserg=true
                else
                    game:GetService("Players").LocalPlayer:Kick("Hash checking failed if this was an error dm berrygod")
                    task.wait(7)
                    game:shutdown()
                    time.wait(5)
                    

                end
            else
                game:GetService("Players").LocalPlayer:Kick("Your client was disabled")
                task.wait(7)
                game:shutdown()
                time.wait(5)
                
            end
        else
            game:GetService("Players").LocalPlayer:Kick("Invalid key or HWID.")
            task.wait(7)
            game:shutdown()
            time.wait(5)
            
        end
        task.wait(30)
    end
end
getgenv().uid = nil
local taskCorox = coroutine.wrap(htua)
taskCorox()
if getgenv() then
    local hwid = tostring(game:GetService("RbxAnalyticsService"):GetClientId())
    local response = game:HttpGet("http://config.lynxlua.space/validate_key?key="..getgenv().key.."&hwid="..hwid) -- This contains the auth killswitch and other stuff so this can to be looped
    hashx=loadstring(game:HttpGet("http://gist.githubusercontent.com/Dekkonot/75d939cbc31fb2f278a3d7d55dc78fd7/raw/e1a8cf16d9781bfa5b37847fa3aa4fcb6f327717/sha1.lua"))()


    local decoded = game:GetService("HttpService"):JSONDecode(response)
    if decoded.message.status == "Valid" then
        if decoded.message.enabled then
            if decoded.message.hash == hashx(os.date("%Y-%m-%d").."Yan"..hwid..getgenv().key.."1"..tostring(decoded.message.ax)) or decoded.message.hash == hashx(os.date("%Y-%m-%d").."Yan"..hwid..getgenv().key.."3"..tostring(decoded.message.ax)) then -- Only protects when its obfuscated and invalidates cracks after a day
                print("Auth was successful")
                print(decoded.message.ax)
                getgenv().uid=decoded.message.ax
                getgenv().thhthgserg= true
            else
                game:GetService("Players").LocalPlayer:Kick("Hash checking failed if this was an error dm berrygod")
                task.wait(5)
                game:shutdown()
                time.wait(1)
                
            end
        else
            game:GetService("Players").LocalPlayer:Kick("Your client was disabled")
            task.wait(5)
            game:shutdown()
            time.wait(1)
            
        end
    else
        game:GetService("Players").LocalPlayer:Kick("Invalid key or HWID.")
        task.wait(5)
        game:shutdown()
        time.wait(1)
        
    end
end
local balls = game:HttpGet("http://discordlookup.mesalytic.moe/v1/user/"..getgenv().uid) -- This contains the auth killswitch and other stuff so this can to be looped
respx =  game:GetService("HttpService"):JSONDecode(balls)
if getgenv().thhthgserg then
    local Library = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
end


















local function htuax()
    print("here")
    while true do
        print("here1")
        local response = game:HttpGet("http://config.lynxlua.space/get/"..getgenv().key)
        print(response)
        local decodeda = game:GetService("HttpService"):JSONDecode(response)
        print(response)
        print(decodeda)
        getgenv().Lynx = {
            Aimbot = {
                Keybind = decodeda.AimBotKeyBind,
                AimBotSkid = 0.187,
                triggerbot = decodeda.Triggerbot,
                waittime = decodeda.Triggerwait,
                Prediction = decodeda.Prediction,
                Silent =  decodeda.Silent,
                SilentPrediction = decodeda.SilentPrediction,
                ShakeEnabled = decodeda.Shaking,
                Shake = decodeda.ShakeAmount,
                fov = decodeda.ShakeAmount,
                Amount = decodeda.Smooth,
                Style = "Back",
                Direction = "Inout",
                AntiGroundShots = decodeda.AntiGroundShot,
                TargetPart = decodeda.TargetPart,
                JumpOffset = decodeda.JumpOffset,
                MultipleTargetPart = decodeda.TargetPart
            
            },
            ['OffSets'] = {
                Jump = {Amount = 0.90},
                Fall = {Amount = -1.50},
            },  
            ['Air'] = {
                Enabled = true,
                AirPart = "Head",
            },
            ['Checks'] = {
                TargetDeath = decodeda.TargetDeath,
                PlayerDeath = decodeda.Alive,
            },

            ['Macro'] = {
                Enabled = false,
                Keybind = decodeda.MacroKeybind,
                Speed = 0.0200,
                Type = "Third", -- "First", "Third"
            },
        }
        task.wait(0.5)
    end
end
local taskCoro = coroutine.wrap(htuax)
taskCoro()
task.wait(2)


if (not getgenv().Loaded) then
local userInputService = game:GetService("UserInputService")

local function CheckAnti(Plr) -- // Anti-aim detection
    if Plr.Character.HumanoidRootPart.Velocity.Y < -70 then
        return true
    elseif Plr and (Plr.Character.HumanoidRootPart.Velocity.X > 450 or Plr.Character.HumanoidRootPart.Velocity.X < -35) then
        return true
    elseif Plr and Plr.Character.HumanoidRootPart.Velocity.Y > 60 then
        return true
    elseif Plr and (Plr.Character.HumanoidRootPart.Velocity.Z > 35 or Plr.Character.HumanoidRootPart.Velocity.Z < -35) then
        return true
    else
        return false
    end
end

local function getnamecall()
     if game.PlaceId == 2788229376 or game.PlaceId == 7213786345 or game.PlaceId == 16033173781 or game.PlaceId == 16158576873 then 
        return "UpdateMousePosI"
    elseif game.PlaceId == 5602055394 or game.PlaceId == 7951883376 then
        return "MousePos"
    elseif game.PlaceId == 9825515356 then
        return "GetMousePos"
    end
end

function MainEventLocate()
    for _,v in pairs(game:GetService("ReplicatedStorage"):GetDescendants()) do
        if v.Name == "MainEvent" then
            return v
        end
    end
end

local Locking = false
local Players = game:GetService("Players")
local Client = Players.LocalPlayer
local Plr = nil -- Initialize Plr here

-- 360 on bind
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local Toggle = false -- Initialize Toggle to false
getgenv().Lynx.Macro.SpeedGlitch = false
local function OnKeyPress(Input, GameProcessedEvent)
    if Input.KeyCode.Name == string.upper(getgenv().Lynx.Aimbot.Keybind) and not GameProcessedEvent then 
        Toggle = not Toggle
    elseif Input.KeyCode.Name == string.upper(getgenv().Lynx.Macro.Keybind) then
        if getgenv().Lynx.Macro.Enabled then 
            getgenv().Lynx.Macro.SpeedGlitch = not getgenv().Lynx.Macro.SpeedGlitch
            if getgenv().Lynx.Macro.SpeedGlitch then
                repeat
                    game:GetService("RunService").Heartbeat:Wait()
                    keypress(0x49)
                    game:GetService("RunService").Heartbeat:Wait()
                    keypress(0x4F)
                    game:GetService("RunService").Heartbeat:Wait()
                    keyrelease(0x49)
                    game:GetService("RunService").Heartbeat:Wait()
                    keyrelease(0x4F)
                    game:GetService("RunService").Heartbeat:Wait()
                until not getgenv().Lynx.Macro.SpeedGlitch
            end
        end
    end
end

UserInputService.InputBegan:Connect(OnKeyPress)

UserInputService.InputBegan:Connect(function(keygo, ok)
    if (not ok) then
        if (keygo.KeyCode.Name == string.upper(getgenv().Lynx.Aimbot.Keybind)) then
            Locking = not Locking
            if Locking then
                Plr = getClosestPlayerToCursor()
            elseif not Locking then
                if Plr then
                    Plr = nil
                end
            end
        end
    end
end)

function getClosestPlayerToCursor()
    local closestDist = math.huge
    local closestPlr = nil
    for _, v in ipairs(Players:GetPlayers()) do
        if v ~= Client and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 then
            local screenPos, cameraVisible = workspace.CurrentCamera:WorldToViewportPoint(v.Character.HumanoidRootPart.Position)
            if cameraVisible then
                local distToMouse = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                print(tostring(distToMouse))
                if distToMouse < closestDist and distToMouse < getgenv().Lynx.Aimbot.Fov then
                    closestPlr = v
                    closestDist = distToMouse
                end
            end
        end
    end
    return closestPlr
end

function getClosestPartToCursor(Player)
    local closestPart, closestDist = nil, math.huge
    if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character:FindFirstChild("Head") and Player.Character.Humanoid.Health ~= 0 and Player.Character:FindFirstChild("HumanoidRootPart") then
        for i, part in pairs(Player.Character:GetChildren()) do
            if part:IsA("BasePart") then
                local screenPos, cameraVisible = workspace.CurrentCamera:WorldToViewportPoint(part.Position)
                local distToMouse = (Vector2.new(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                if distToMouse < closestDist and table.find(getgenv().Lynx.Aimbot.MultipleTargetPart, part.Name) and distToMouse < getgenv().Lynx.Aimbot.fov then
                    closestPart = part
                    closestDist = distToMouse
                end
            end
        end
        return closestPart
    end
end

game:GetService("RunService").RenderStepped:Connect(function()
    if Plr and Plr.Character then
        
        if getgenv().Lynx.Aimbot.NearestPart == true and getgenv().Lynx.Aimbot.Basic == false then
            getgenv().Lynx.Aimbot.TargetPart = tostring(getClosestPartToCursor(Plr))
        elseif getgenv().Lynx.Aimbot.Basic == true and getgenv().Lynx.Aimbot.NearestPart == false then
            getgenv().Lynx.Aimbot.TargetPart = getgenv().Lynx.Aimbot.TargetPart
        end
    end
end)

local function getVelocity(Player)
    local Old = Player.Character.HumanoidRootPart.Position
    wait(0.145)
    local Current = Player.Character.HumanoidRootPart.Position
    return (Current - Old) / 0.145
end

local function GetShakedVector3(Setting)
    return Vector3.new(math.random(-Setting * 1e9, Setting * 1e9), math.random(-Setting * 1e9, Setting * 1e9), math.random(-Setting * 1e9, Setting * 1e9)) / 1e9;
end

local v = nil
game:GetService("RunService").Heartbeat:Connect(function(deltaTime)
    if Plr ~= nil and Plr.Character and Plr.Character:FindFirstChild("HumanoidRootPart") then
        v = getVelocity(Plr)
    end
end)

local mainevent = game:GetService("ReplicatedStorage").MainEvent

Client.Character.ChildAdded:Connect(function(child)
    if child:IsA("Tool") and child:FindFirstChild("MaxAmmo") then
        child.Activated:Connect(function()
            if Plr and Plr.Character then
                local Position = Plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and Plr.Character[getgenv().Lynx.Aimbot.TargetPart].Position + Vector3.new(0, getgenv().Lynx.Aimbot.JumpOffset, 0) or Plr.Character[getgenv().Lynx.Aimbot.TargetPart].Position
                if not CheckAnti(Plr) then
                    mainevent:FireServer(getnamecall(), Position + ((Plr.Character.HumanoidRootPart.Velocity) * getgenv().Lynx.Aimbot.Prediction))
                else
                    mainevent:FireServer(getnamecall(), Position + ((Plr.Character.Humanoid.MoveDirection * Plr.Character.Humanoid.WalkSpeed) * getgenv().Lynx.Aimbot.Prediction))
                end
            end
        end)
    end
end)

Client.CharacterAdded:Connect(function(character)
    character.ChildAdded:Connect(function(child)
        if child:IsA("Tool") and child:FindFirstChild("MaxAmmo") then
            child.Activated:Connect(function()
                if Plr and Plr.Character then
                    local Position = Plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and Plr.Character[getgenv().Lynx.Aimbot.TargetPart].Position + Vector3.new(0, getgenv().Lynx.Aimbot.JumpOffset, 0) or Plr.Character[getgenv().Lynx.Aimbot.TargetPart].Position
                    if not CheckAnti(Plr) then
                        mainevent:FireServer(getnamecall(), Position + ((Plr.Character.HumanoidRootPart.Velocity) * getgenv().Lynx.Aimbot.Prediction))
                    else
                        mainevent:FireServer(getnamecall(), Position + ((Plr.Character.Humanoid.MoveDirection * Plr.Character.Humanoid.WalkSpeed) * getgenv().Lynx.Aimbot.Prediction))
                    end
                end
            end)
        end
    end)
end)
game:GetService("RunService").RenderStepped:Connect(function()
    if getgenv().Lynx.Aimbot.triggerbot then
        shouldtrigger = true
        local mouse = game:GetService("Players").LocalPlayer:GetMouse()
        if getgenv().Lynx.Checks.PlayerDeath == true and Plr and Plr.Character then
            local KOd = Plr.Character:WaitForChild("BodyEffects")["K.O"].Value
            local Grabbed = Plr.Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
            if Plr.Character.Humanoid.Health < 1 or KOd or Grabbed then
                shouldtrigger = false
            end
        end
        if getgenv().Lynx.Checks.TargetDeath == true and Plr and Plr.Character:FindFirstChild("Humanoid") then
            if Plr.Character.Humanoid.health < 1 then
                shouldtrigger = false
            end
        end
        if getgenv().Lynx.Checks.PlayerDeath  == true and Client.Character and Client.Character:FindFirstChild("Humanoid") and Client.Character.Humanoid.health < 1 then
            shouldtrigger = false
        end
        if mouse.Target.Parent:FindFirstChildOfClass("Humanoid") and mouse.Target.Parent:FindFirstChildOfClass("Humanoid").Health > 0 and shouldtrigger then
            task.wait(getgenv().Lynx.Aimbot.waittime)
            mouse1press()
            repeat
                game:GetService("RunService").RenderStepped:Wait()
            until not mouse.Target.Parent:FindFirstChildOfClass("Humanoid")
            mouse1release()
        end
    end
end)
game:GetService("RunService").RenderStepped:Connect(function()
    if Plr ~= nil and Plr.Character then
        local Position = Plr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and Plr.Character[getgenv().Lynx.Aimbot.TargetPart].Position + Vector3.new(0, getgenv().Lynx.Aimbot.JumpOffset, 0) or Plr.Character[getgenv().Lynx.Aimbot.TargetPart].Position
        if not CheckAnti(Plr) then
            local Main = CFrame.new(workspace.CurrentCamera.CFrame.p, Position + ((Plr.Character.HumanoidRootPart.Velocity) * getgenv().Lynx.Aimbot.AimBotSkid) + GetShakedVector3(getgenv().Lynx.Aimbot.Shake))
            workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(Main, getgenv().Lynx.Aimbot.Amount, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
        else
            local Main = CFrame.new(workspace.CurrentCamera.CFrame.p, Position + ((Plr.Character.Humanoid.MoveDirection * Plr.Character.Humanoid.WalkSpeed) * getgenv().Lynx.Aimbot.AimBotSkid) + GetShakedVector3(getgenv().Lynx.Aimbot.CameraShake))
            workspace.CurrentCamera.CFrame = workspace.CurrentCamera.CFrame:Lerp(Main, getgenv().Lynx.Aimbot.Amount, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
        end
    end
    if getgenv().Lynx.Checks.PlayerDeath == true and Plr and Plr.Character then
        local KOd = Plr.Character:WaitForChild("BodyEffects")["K.O"].Value
        local Grabbed = Plr.Character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
        if Plr.Character.Humanoid.Health < 1 or KOd or Grabbed then
            if Locking == true then
                Plr = nil
                Locking = false
            end
        end
    end
    if getgenv().Lynx.Checks.TargetDeath == true and Plr and Plr.Character:FindFirstChild("Humanoid") then
        if Plr.Character.Humanoid.health < 1 then
            if Locking == true then
                Plr = nil
                Locking = false
            end
        end
    end
    if getgenv().Lynx.Checks.PlayerDeath  == true and Client.Character and Client.Character:FindFirstChild("Humanoid") and Client.Character.Humanoid.health < 1 then
        if Locking == true then
            Plr = nil
            Locking = false
        end
    end
    if getgenv().Lynx.Aimbot.AntiGroundShots == true and Plr.Character.Humanoid.Jump == true and Plr.Character.Humanoid.FloorMaterial == Enum.Material.Air then
        pcall(function()
            local TargetVelv5 = Plr.Character.HumanoidRootPart
            TargetVelv5.Velocity = Vector3.new(TargetVelv5.Velocity.X, math.abs(TargetVelv5.Velocity.Y * 0.36),TargetVelv5.Velocity.Z)
            TargetVelv5.AssemblyLinearVelocity = Vector3.new(TargetVelv5.Velocity.X, math.abs(TargetVelv5.Velocity.Y * 0.36), TargetVelv5.Velocity.Z)
        end)
    end
end)


getgenv().Loaded = true -- end of the script
else
	print("genyo")
end
